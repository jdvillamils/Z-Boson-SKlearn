{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5462d3bf",
   "metadata": {},
   "source": [
    "# Analysis ZZ Boson"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "4667148d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import uproot3\n",
    "import pandas as pd \n",
    "import ROOT\n",
    "from ROOT import TMath, TChain\n",
    "import time\n",
    "import numpy as np\n",
    "import root_pandas as rp\n",
    "import math\n",
    "import matplotlib.pyplot as plt \n",
    "from matplotlib.ticker import AutoMinorLocator \n",
    "\n",
    "#Local information file\n",
    "import infofile "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d34472b2",
   "metadata": {},
   "source": [
    "List with all the sampels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "66c1dc68",
   "metadata": {},
   "outputs": [],
   "source": [
    "treeS = TChain(\"mini\")\n",
    "treeS.Add(\"https://atlas-opendata.web.cern.ch/atlas-opendata/samples/2020/4lep/MC/mc_363490.llll.4lep.root\")\n",
    "t1=treeS.GetEntries()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "5e1ad7fe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "554279\n"
     ]
    }
   ],
   "source": [
    "print(t1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "40d4ccf9",
   "metadata": {},
   "outputs": [],
   "source": [
    "treeb = TChain(\"mini\")\n",
    "treeb.Add(\"https://atlas-opendata.web.cern.ch/atlas-opendata/samples/2020/2lep/MC/mc_363491.lllv.2lep.root\")\n",
    "treeb.Add(\"https://atlas-opendata.web.cern.ch/atlas-opendata/samples/2020/4lep/MC/mc_363491.lllv.4lep.root\")\n",
    "treeb.Add(\"https://atlas-opendata.web.cern.ch/atlas-opendata/samples/2020/4lep/MC/mc_363358.WqqZll.4lep.root\")\n",
    "treeb.Add(\"https://atlas-opendata.web.cern.ch/atlas-opendata/samples/2020/4lep/MC/mc_361106.Zee.4lep.root\")\n",
    "treeb.Add(\"https://atlas-opendata.web.cern.ch/atlas-opendata/samples/2020/4lep/MC/mc_361107.Zmumu.4lep.root\")\n",
    "b1=treeb.GetEntries()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "cd771315",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3802777\n"
     ]
    }
   ],
   "source": [
    "print(b1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "f7013ebd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running a total of  554279  events\n",
      "Initial events: 10000\n",
      "Final events: 2257\n",
      "Finished in 0 min 7 s\n",
      "       fourleppt  fourlepmass\n",
      "0      65.123914   229.654312\n",
      "1      39.909485   296.506036\n",
      "2      49.478026   201.753759\n",
      "3      54.099883   243.221883\n",
      "4      20.353440   189.367043\n",
      "...          ...          ...\n",
      "2252   23.588147   205.735340\n",
      "2253   20.463450   226.048892\n",
      "2254   83.875232   195.309529\n",
      "2255  179.250072   300.594904\n",
      "2256   61.009042   484.129696\n",
      "\n",
      "[2257 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "start = time.time()\n",
    "lepton1 = ROOT.TLorentzVector()\n",
    "lepton2 = ROOT.TLorentzVector()\n",
    "lepton3 = ROOT.TLorentzVector()\n",
    "lepton4 = ROOT.TLorentzVector()\n",
    "fourlep = ROOT.TLorentzVector()\n",
    "df1=pd.DataFrame(columns=('fourleppt', 'fourlepmass'))\n",
    "k=0\n",
    "kf=0\n",
    "lumi=10\n",
    "index1=0\n",
    "index2=0\n",
    "index3=0\n",
    "index4=0\n",
    "print(\"Running a total of \",t1,\" events\")\n",
    "for event in treeS:\n",
    "    k=k+1\n",
    "    data['pt']=np.vectorize(treeS.lep_pt)\n",
    "    if(k==10000): break\n",
    "    goodlep=0\n",
    "    glindex=[]\n",
    "    lep_index=0\n",
    "    if(treeS.trigE or treeS.trigM):\n",
    "        if(treeS.lep_n>=4):\n",
    "            for j in range(treeS.lep_n):\n",
    "                if((treeS.lep_pt[j]>25000.) and (treeS.lep_ptcone30[j]/treeS.lep_pt[j] < 0.15) and (treeS.lep_etcone20[j]/treeS.lep_pt[j] < 0.15)):\n",
    "                    #Electron in F zone\n",
    "                    if(treeS.lep_type[j]==11 and abs(treeS.lep_eta[j])<2.47 and (abs(treeS.lep_eta[j])<1.37 or abs(treeS.lep_eta[j])>1.52)):\n",
    "                        theta = 2*np.arctan(np.exp(-treeS.lep_eta[j]))\n",
    "                        if(treeS.lep_trackd0pvunbiased[j]/treeS.lep_tracksigd0pvunbiased[j] < 5 and abs(treeS.lep_z0[j]*np.sin(theta))<0.5):\n",
    "                            goodlep+=1\n",
    "                            glindex.append(j)\n",
    "                    if(treeS.lep_type[j]==13 and abs(treeS.lep_eta[j]<2.5)):\n",
    "                        theta = 2*np.arctan(np.exp(-treeS.lep_eta[j]))\n",
    "                        if(treeS.lep_trackd0pvunbiased[j]/treeS.lep_tracksigd0pvunbiased[j] < 3 and abs(treeS.lep_z0[j]*np.sin(theta))<0.5):\n",
    "                            goodlep+=1\n",
    "                            glindex.append(j)\n",
    "            if(goodlep==4):\n",
    "                index1=glindex[0]\n",
    "                index2=glindex[1]\n",
    "                index3=glindex[2]\n",
    "                index4=glindex[3]\n",
    "                \n",
    "                lepton1.SetPtEtaPhiE(treeS.lep_pt[index1], treeS.lep_eta[index1], treeS.lep_phi[index1], treeS.lep_E[index1])\n",
    "                lepton2.SetPtEtaPhiE(treeS.lep_pt[index2], treeS.lep_eta[index2], treeS.lep_phi[index2], treeS.lep_E[index2])\n",
    "                lepton3.SetPtEtaPhiE(treeS.lep_pt[index3], treeS.lep_eta[index3], treeS.lep_phi[index3], treeS.lep_E[index3])\n",
    "                lepton4.SetPtEtaPhiE(treeS.lep_pt[index4], treeS.lep_eta[index4], treeS.lep_phi[index4], treeS.lep_E[index4])\n",
    "                deltaz1_1=0\n",
    "                deltaz2_1=0\n",
    "                deltaz1_2=0\n",
    "                deltaz2_2=0\n",
    "                deltaz1_3=0\n",
    "                deltaz2_3=0\n",
    "                invz1_1=0\n",
    "                invz2_1=0\n",
    "                invz1_2=0\n",
    "                invz2_2=0\n",
    "                invz1_3=0\n",
    "                invz2_3=0\n",
    "                if((treeS.lep_charge[index1]+treeS.lep_charge[index2] + treeS.lep_charge[index3] + treeS.lep_charge[index4]) == 0):\n",
    "                    sumt=treeS.lep_type[index1]+treeS.lep_type[index2] + treeS.lep_type[index3] + treeS.lep_type[index4]\n",
    "                    if(sumt==44 or sumt==52):\n",
    "                        if(treeS.lep_type[index1]==treeS.lep_type[index2] and (treeS.lep_charge[index1]*treeS.lep_charge[index2]<0)):\n",
    "                            invz1_1=(lepton1+lepton2).Mag()/1000.\n",
    "                            invz2_1=(lepton3+lepton4).Mag()/1000.\n",
    "                            deltaz1_1=abs(invz1_1-91.18)\n",
    "                            deltaz2_1=abs(invz2_1-91.18)\n",
    "                        if(treeS.lep_type[index1]==treeS.lep_type[index3] and (treeS.lep_charge[index1]*treeS.lep_charge[index3]<0)):\n",
    "                            invz1_2=(lepton1+lepton3).Mag()/1000.\n",
    "                            invz2_2=(lepton2+lepton4).Mag()/1000.\n",
    "                            deltaz1_2=abs(invz1_2-91.18)\n",
    "                            deltaz2_2=abs(invz2_2-91.18)\n",
    "                        if(treeS.lep_type[index1]==treeS.lep_type[index4] and (treeS.lep_charge[index1]*treeS.lep_charge[index4]<0)):\n",
    "                            invz1_3=(lepton1+lepton4).Mag()/1000.\n",
    "                            invz2_3=(lepton2+lepton3).Mag()/1000.\n",
    "                            deltaz1_3=abs(invz1_3-91.18)\n",
    "                            deltaz2_3=abs(invz2_3-91.18)\n",
    "                        sumzz1=deltaz1_1+deltaz2_1\n",
    "                        sumzz2=deltaz1_2+deltaz2_2\n",
    "                        sumzz3=deltaz1_3+deltaz2_3\n",
    "                        \n",
    "                        if(sumzz1<sumzz2 and sumzz1<sumzz3):\n",
    "                            invz1min=invz1_1\n",
    "                            invz2min=invz2_1\n",
    "                            sumzz=sumzz1\n",
    "                        if(sumzz2<sumzz1 and sumzz2<sumzz3):\n",
    "                            invz1min=invz1_2\n",
    "                            invz2min=invz2_2\n",
    "                            sumzz=sumzz2\n",
    "                        if(sumzz3<sumzz1 and sumzz3<sumzz2):\n",
    "                            invz1min=invz1_3\n",
    "                            invz2min=invz2_3\n",
    "                            sumzz=sumzz3\n",
    "                            \n",
    "                    if(sumt==48):\n",
    "                        if(treeS.lep_type[index1]==treeS.lep_type[index2] and (treeS.lep_charge[index1]*treeS.lep_charge[index2]<0)):\n",
    "                            invz1=(lepton1+lepton2).Mag()/1000.\n",
    "                            invz2=(lepton3+lepton4).Mag()/1000.\n",
    "                            deltaz1=abs(invz1-91.18)\n",
    "                            deltaz2=abs(invz2-91.18)\n",
    "                        if(treeS.lep_type[index1]==treeS.lep_type[index3] and (treeS.lep_charge[index1]*treeS.lep_charge[index3]<0)):\n",
    "                            invz1=(lepton1+lepton3).Mag()/1000.\n",
    "                            invz2=(lepton2+lepton4).Mag()/1000.\n",
    "                            deltaz1=abs(invz1-91.18)\n",
    "                            deltaz2=abs(invz2-91.18)\n",
    "                        if(treeS.lep_type[index1]==treeS.lep_type[index4] and (treeS.lep_charge[index1]*treeS.lep_charge[index4]<0)):\n",
    "                            invz1=(lepton1+lepton4).Mag()/1000.\n",
    "                            invz2=(lepton2+lepton3).Mag()/1000.\n",
    "                            deltaz1=abs(invz1_3-91.18)\n",
    "                            deltaz2=abs(invz2_3-91.18)\n",
    "                        sumzz=deltaz1+deltaz2\n",
    "                        invz1min=invz1\n",
    "                        invz2min=invz2\n",
    "                    if(treeS.lep_pt[index1]>25000 or treeS.lep_pt[index2]>25000 or treeS.lep_pt[index3]>25000 or treeS.lep_pt[index4]>25000):\n",
    "                        if((sumt==44 or sumt==52 or sumt==48) and sumzz<50):\n",
    "                            fourlep=lepton1+lepton2+lepton3+lepton4\n",
    "                            fourleppt=fourlep.Pt()/1000.\n",
    "                            fourlepmass=fourlep.M()/1000.\n",
    "                            info = infofile.infos['llll']\n",
    "                            xsec_weight = (lumi*1000*info[\"xsec\"])/(info[\"sumw\"]*info[\"red_eff\"])\n",
    "                            weight=xsec_weight*treeS.mcWeight*treeS.scaleFactor_PILEUP*treeS.scaleFactor_ELE*treeS.scaleFactor_MUON*treeS.scaleFactor_LepTRIGGER\n",
    "                            df1.loc[kf]=[fourleppt, fourlepmass]\n",
    "                            kf+=1\n",
    "                           \n",
    "end = time.time()\n",
    "duration = end-start\n",
    "print('Initial events:', k)\n",
    "print('Final events:', kf)\n",
    "print(\"Finished in {} min {} s\".format(int(duration//60),int(duration%60)))\n",
    "#roofs[\"signal\"].extend({\"mll\": invM, \"lead\": leadpt, \"sublead\": subleadpt, \"weight\": weights})\n",
    "#roofs.close()\n",
    "#print('Successful close')\n",
    "\n",
    "print(df1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "118e3e65",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running a total of  3791795  events\n"
     ]
    }
   ],
   "source": [
    "start = time.time()\n",
    "lepton1 = ROOT.TLorentzVector()\n",
    "lepton2 = ROOT.TLorentzVector()\n",
    "lepton3 = ROOT.TLorentzVector()\n",
    "lepton4 = ROOT.TLorentzVector()\n",
    "fourlep = ROOT.TLorentzVector()\n",
    "df2=pd.DataFrame(columns=('fourleppt', 'fourlepmass'))\n",
    "k=0\n",
    "kf=0\n",
    "lumi=10\n",
    "index1=0\n",
    "index2=1\n",
    "index3=2\n",
    "index4=3\n",
    "print(\"Running a total of \",b3,\" events\")\n",
    "for event in treeb:\n",
    "    k=k+1\n",
    "    #if(k==1000000): break\n",
    "    if(treeb.lep_n>=4):\n",
    "\n",
    "            lepton1.SetPtEtaPhiE(treeb.lep_pt[index1], treeb.lep_eta[index1], treeb.lep_phi[index1], treeb.lep_E[index1])\n",
    "            lepton2.SetPtEtaPhiE(treeb.lep_pt[index2], treeb.lep_eta[index2], treeb.lep_phi[index2], treeb.lep_E[index2])\n",
    "            lepton3.SetPtEtaPhiE(treeb.lep_pt[index3], treeb.lep_eta[index3], treeb.lep_phi[index3], treeb.lep_E[index3])\n",
    "            lepton4.SetPtEtaPhiE(treeb.lep_pt[index4], treeb.lep_eta[index4], treeb.lep_phi[index4], treeb.lep_E[index4])\n",
    "\n",
    "\n",
    "            invz1_1=(lepton1+lepton2).Mag()/1000.\n",
    "            invz2_1=(lepton3+lepton4).Mag()/1000.\n",
    "            deltaz1_1=abs(invz1_1-91.18)\n",
    "            deltaz2_1=abs(invz2_1-91.18)\n",
    "            sumzz1=deltaz1_1+deltaz2_1\n",
    "            invz1min=invz1_1\n",
    "            invz2min=invz2_1\n",
    "            sumzz=sumzz1\n",
    "\n",
    "            fourlep=lepton1+lepton2+lepton3+lepton4\n",
    "            fourleppt=fourlep.Pt()/1000.\n",
    "            fourlepmass=fourlep.M()/1000.\n",
    "            info = infofile.infos['llll']\n",
    "            xsec_weight = (lumi*1000*info[\"xsec\"])/(info[\"sumw\"]*info[\"red_eff\"])\n",
    "            weight=xsec_weight*treeb.mcWeight*treeb.scaleFactor_PILEUP*treeb.scaleFactor_ELE*treeb.scaleFactor_MUON*treeb.scaleFactor_LepTRIGGER\n",
    "            df2.loc[kf]=[fourleppt, fourlepmass]\n",
    "            kf+=1\n",
    "                           \n",
    "end = time.time()\n",
    "duration = end-start\n",
    "print('Initial events:', k)\n",
    "print('Final events:', kf)\n",
    "print(\"Finished in {} min {} s\".format(int(duration//60),int(duration%60)))\n",
    "#roofs[\"signal\"].extend({\"mll\": invM, \"lead\": leadpt, \"sublead\": subleadpt, \"weight\": weights})\n",
    "#roofs.close()\n",
    "#print('Successful close')\n",
    "\n",
    "print(df2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "931c6ef4",
   "metadata": {},
   "source": [
    "Organising data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "1d6e378c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# one 2D array of shape (n_samples x n_features) \n",
    "\n",
    "all_MC = [] \n",
    "for key in data: \n",
    "    if key!='data': #Basically, all samples\n",
    "        all_MC.append(data_for_BDT[key])\n",
    "X = np.concatenate(all_MC) \n",
    "\n",
    "all_y = [] \n",
    "for key in data: \n",
    "    if key!='Zsignal' and key!='data': #Just background samples\n",
    "        all_y.append(np.zeros(data_for_BDT[key].shape[0])) # background events are labelled with 0\n",
    "all_y.append(np.ones(data_for_BDT['Zsignal'].shape[0])) # signal events are labelled with 1\n",
    "y = np.concatenate(all_y) # concatenate the list of lables into a single 1D array of labels, called y"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aac37527",
   "metadata": {},
   "source": [
    "Split for training and testing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "f1f43892",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# make train and test sets\n",
    "X_train,X_test, y_train,y_test = train_test_split(X, y, \n",
    "                                                  test_size=0.33, \n",
    "                                                  random_state=492 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "3a9daf57",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time taken to fit BDT: 9.8s\n",
      "AdaBoostClassifier(algorithm='SAMME',\n",
      "                   base_estimator=DecisionTreeClassifier(max_depth=2),\n",
      "                   learning_rate=0.5, n_estimators=12)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "\n",
    "dt = DecisionTreeClassifier(max_depth=2) # maximum depth of the tree\n",
    "bdt = AdaBoostClassifier(dt,\n",
    "                        algorithm='SAMME', # SAMME discrete boosting algorithm\n",
    "                        n_estimators=12, # max number of estimators at which boosting is terminated\n",
    "                        learning_rate=0.5) # shrinks the contribution of each classifier by learning_rate\n",
    "\n",
    "start = time.time() # time at start of BDT fit\n",
    "bdt.fit(X_train, y_train) # fit BDT to training set\n",
    "elapsed = time.time() - start # time after fitting BDT\n",
    "print(\"Time taken to fit BDT: \"+str(round(elapsed,1))+\"s\") # print total time taken to fit BDT\n",
    "print(bdt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "9ea16507",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1248: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1248: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n",
      "/cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc10-opt/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1248: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, msg_start, len(result))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "  background       0.00      0.00      0.00      6033\n",
      "      signal       0.98      1.00      0.99    298250\n",
      "\n",
      "    accuracy                           0.98    304283\n",
      "   macro avg       0.49      0.50      0.49    304283\n",
      "weighted avg       0.96      0.98      0.97    304283\n",
      "\n",
      "Area under ROC curve for test data: 0.5034\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report, roc_auc_score\n",
    "y_predicted = bdt.predict(X_test) # get predicted y for test set\n",
    "print (classification_report(y_test, y_predicted,\n",
    "                            target_names=[\"background\", \"signal\"]))\n",
    "print (\"Area under ROC curve for test data: %.4f\"%(roc_auc_score(y_test,\n",
    "                                                    bdt.decision_function(X_test))) )"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
